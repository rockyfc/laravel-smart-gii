<?php

namespace {{ namespace }};

use {{ namespace }}\Contracts\RequestInterface;
use {{ namespace }}\Contracts\ResponseInterface;
use Illuminate\Support\Facades\Cache;

/**
 * http 客户端
 * @package {{ namespace }};
 * @version 1.0
 */
class Client implements RequestInterface, ResponseInterface
{
    /**
     * 接口对象
     * @var Api
     */
    protected $api;

    /**
     * @var string
     */
    protected static $appId;

    /**
     * @var string
     */
    protected static $appSecret;

    /**
     * @var string 一个完整的带http的url
     */
    protected static $host;

    /**
     * @var int 状态码
     */
    protected $statusCode;

    /**
     * @var string 错误消息
     */
    protected $errorMessage;

    /**
     * @var string 请求正确时的数据
     */
    protected $data;

    /**
     * Client constructor.
     * @param Api $api
     */
    public function __construct(Api $api)
    {
        $this->api = $api;
    }

    /**
     * 设置host,appId和appSecret
     * @param string $host
     * @param string $appId
     * @param string $appSecret
     */
    public static function setApp(string $host, string $appId, string $appSecret)
    {
        static::$appId = $appId;
        static::$appSecret = $appSecret;
        static::$host = $host;
    }

    /**
     * {@inheritdoc}
     */
    public function send($ttl = 0)
    {
        if (in_array('GET', $this->api->getMethod())) {
            $this->get($ttl);

            return $this;
        }

        if (in_array('POST', $this->api->getMethod())) {
            $this->post();

            return $this;
        }

        if (in_array('PUT', $this->api->getMethod())) {
            $this->put();

            return $this;
        }

        if (in_array('PATCH', $this->api->getMethod())) {
            $this->patch();

            return $this;
        }

        if (in_array('HEAD', $this->api->getMethod())) {
            $this->head();

            return $this;
        }
    }

    /**
     * {@inheritdoc}
     */
    public function get($ttl = 0)
    {
        $cacheKey = $this->getCacheKey($ttl);

        if ($ttl > 0 and $data = Cache::get($cacheKey)) {
            $this->data = $data['data'];
            $this->statusCode = $data['code'];

            return true;
        }

        $this->httpRequest(
            'get',
            $this->url(),
            $this->api->getHttpData(),
            $this->api->getHeaders()
        );

        //存缓存
        if ($ttl > 0 and $this->isSuccessful()) {
            Cache::put($cacheKey, [
                'data' => $this->data,
                'code' => $this->statusCode,
            ], $ttl);
        }
    }

    /**
     * {@inheritdoc}
     */
    public function post()
    {
        return $this->httpRequest(
            'post',
            $this->url(),
            $this->api->getHttpData(),
            $this->api->getHeaders()
        );
    }

    /**
     * {@inheritdoc}
     */
    public function put()
    {
        return $this->httpRequest(
            'put',
            $this->url(),
            $this->api->getHttpData(),
            $this->api->getHeaders()
        );
    }

    /**
     * {@inheritdoc}
     */
    public function patch()
    {
        return $this->httpRequest(
            'patch',
            $this->url(),
            $this->api->getHttpData(),
            $this->api->getHeaders()
        );
    }

    /**
     * {@inheritdoc}
     */
    public function delete()
    {
        return $this->httpRequest(
            'delete',
            $this->url(),
            $this->api->getHttpData(),
            $this->api->getHeaders()
        );
    }

    /**
     * {@inheritdoc}
     */
    public function head()
    {
        return $this->httpRequest(
            'head',
            $this->url(),
            $this->api->getHttpData(),
            $this->api->getHeaders()
        );
    }

    /**
     * 获取当前环境下的接口域名
     * @return string
     */
    public function url(): string
    {
        return static::$host . $this->makeSignUri();
    }

    /**
     * @return int
     */
    public function getStatusCode()
    {
        return $this->statusCode;
    }

    /**
     * @return string
     */
    public function getErrorMessage()
    {
        return $this->errorMessage;
    }

    /**
     * {@inheritdoc}
     */
    public function originalResponseData(): string
    {
        return (string)$this->data;
    }

    /**
     * {@inheritdoc}
     */
    public function responseArrayData(): array
    {
        return (array)json_decode($this->data, 1);
    }

    /**
     * {@inheritdoc}
     */
    public function isInvalid(): bool
    {
        return $this->getStatusCode() < 100 || $this->getStatusCode() >= 600;
    }

    /**
     * {@inheritdoc}
     */
    public function isInformational(): bool
    {
        return $this->getStatusCode() >= 100 && $this->getStatusCode() < 200;
    }

    /**
     * {@inheritdoc}
     */
    public function isSuccessful(): bool
    {
        return $this->getStatusCode() >= 200 && $this->getStatusCode() < 300;
    }

    /**
     * {@inheritdoc}
     */
    public function isRedirection(): bool
    {
        return $this->getStatusCode() >= 300 && $this->getStatusCode() < 400;
    }

    /**
     * {@inheritdoc}
     */
    public function isClientError(): bool
    {
        return $this->getStatusCode() >= 400 && $this->getStatusCode() < 500;
    }

    /**
     * {@inheritdoc}
     */
    public function isServerError(): bool
    {
        return $this->getStatusCode() >= 500 && $this->getStatusCode() < 600;
    }

    /**
     * {@inheritdoc}
     */
    public function isOk(): bool
    {
        return 200 === $this->getStatusCode();
    }

    /**
     * {@inheritdoc}
     */
    public function isForbidden(): bool
    {
        return 403 === $this->getStatusCode();
    }

    /**
     * {@inheritdoc}
     */
    public function isNotFound(): bool
    {
        return 404 === $this->getStatusCode();
    }

    /**
     * {@inheritdoc}
     */
    public function isEmpty(): bool
    {
        return \in_array($this->getStatusCode(), [204, 304]);
    }

    /**
     * 设置返回值
     * @param $code
     * @param $data
     */
    protected function setResponse($code, $data)
    {
        $this->statusCode = $code;
        if ($code >= 200 and $code < 300) {
            $this->data = $data;
        }
        if ($code >= 400 and $code < 600) {
            $this->errorMessage = $data;
        }
    }

    /**
     * http请求
     * @param $method
     * @param $url
     * @param $data
     * @param $header
     */
    protected function httpRequest($method, $url, $data, $header)
    {
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);

        switch ($method) {
            case 'head':
            case 'get':
                break;

            case 'post':
                    curl_setopt($ch, CURLOPT_POST, true);
                    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));

                    break;

            case 'put':
                    curl_setopt($ch, CURLOPT_POST, true);
                    $data = array_merge($data, [
                        '_method' => 'PUT',
                    ]);
                    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));

                break;

            case 'patch':
                    curl_setopt($ch, CURLOPT_POST, true);

                    $data = array_merge($data, [
                        '_method' => 'PATCH',
                    ]);
                    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));

                break;

            case 'delete':
                    curl_setopt($ch, CURLOPT_POST, true);
                    $data = array_merge($data, [
                        '_method' => 'DELETE',
                    ]);
                    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));

                break;
        }

        if (preg_match('/https:/', $url)) {
            // 对认证证书来源的检查
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
            // 从证书中检查SSL加密算法是否存在
            curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
        }

        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        $data = curl_exec($ch);
        $code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        $this->setResponse($code, $data);
        curl_close($ch);
    }

    protected function getCacheKey($ttl)
    {
        if ($ttl < 1) {
            return '';
        }
        $uri = $this->api->getUri();
        $queryParams = array_merge(
            $this->api->getFilteredQueryParams(),
            [
                'app_id' => static::$appId,
                'sign_type' => 'md5',
            ]
        );
        if ($queryParams) {
            $queryParams = '?' . http_build_query($queryParams);
        }

        return md5($uri . $queryParams) . $ttl;
    }

    /**
     * uri加签
     * @return string
     */
    protected function makeSignUri()
    {
        $uri = $this->api->getUri();
        $queryParams = array_merge(
            $this->api->getFilteredQueryParams(),
            [
                'time' => time(),
                'app_id' => static::$appId,
                'sign_type' => 'md5',
            ]
        );

        //生成签名
        $queryParams['sign'] = $this->makeMd5Sign(array_merge(
            $queryParams,
            $this->api->getHttpData()
        ));

        //如果是get请求方式，则将queryParams和httpData合并
        if (in_array('GET', $this->api->getMethod())) {
            $queryParams = array_merge(
                $queryParams,
                $this->api->getHttpData()
            );
        }

        if ($queryParams) {
            $queryParams = '?' . http_build_query($queryParams);
        }

        return $uri . $queryParams;
    }

    /**
     * md5方式签名
     * @param $params
     * @return string
     */
    protected function makeMd5Sign($params)
    {
        ksort($params);
        $str = '';
        foreach ($params as $k => &$v) {
            if (is_array($v)) {
                ksort($v);
                $str .= $k . json_encode($v);
                continue;
            }
            $str .= $k . $v;
        }
        $str .= static::$appSecret;

        return md5(base64_encode($str));
    }
}

